<% provide(:title, "All Leases") %>
<html>
<head>
  <script type="text/javascript" src="//maps.google.com/maps/api/js?key=AIzaSyDDVHE7vDIfbP8Jzh5lOO_tRwSsaBU7LA4&libraries=places&callback=initAutocomplete" async defer></script>
  <script src="//cdn.rawgit.com/mahnunchik/markerclustererplus/master/dist/markerclusterer.min.js"></script>
</head>
<body>

    <input id="pac-input" class="controls" type="text" placeholder="Search Box"/>
    <div id="map" style="width: 1500px; height: 800px;"></div>

  <script type="text/javascript">

  function initAutocomplete() {
    var locations = <%=raw @markers %>
    var centerofmap = <%=raw @center %>
  	var latlang = new google.maps.LatLng(centerofmap[0], centerofmap[1]);
  	var markers = [];
  	var map = new google.maps.Map(document.getElementById('map'), {
  		// scrollwheel: true,
  		zoom: 10,
  		center: latlang,
  		mapTypeId: google.maps.MapTypeId.ROADMAP
    	});

    // Create the search box and link it to the UI element.
    var input = document.getElementById('pac-input');
    var searchBox = new google.maps.places.SearchBox(input);
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

    // Bias the SearchBox results towards current map's viewport.
    map.addListener('bounds_changed', function() {
      searchBox.setBounds(map.getBounds());
    });

	  // [START region_getplaces]
	  // Listen for the event fired when the user selects a prediction and retrieve
	  // more details for that place.
	  searchBox.addListener('places_changed', function() {
	  	var places = searchBox.getPlaces();
	  	if (places.length == 0) {
	  		return;
	  	}

	    // For each place, get the icon, name and location.
	    var bounds = new google.maps.LatLngBounds();
	    places.forEach(function(place) {
	    	var icon = {
	    		url: place.icon,
	    		size: new google.maps.Size(71, 71),
	    		origin: new google.maps.Point(0, 0),
	    		anchor: new google.maps.Point(17, 34),
	    		scaledSize: new google.maps.Size(38, 38)
	    	};

        if (place.geometry.viewport) {
          // Only geocodes have viewport.
          bounds.union(place.geometry.viewport);
        } else {
      	bounds.extend(place.geometry.location);
        }
      });
	    map.fitBounds(bounds);
	  });
	  // [END region_getplaces]

    var infowindow = new google.maps.InfoWindow();

    var marker, i;

    for (i = 0; i < locations.length; i++) {
      marker = new google.maps.Marker({
        position: new google.maps.LatLng(locations[i][1], locations[i][2]),
        map: map
      });

      google.maps.event.addListener(marker, 'click', (function(marker, i) {
        return function() {
          infowindow.setContent('<div style="width: 200px; height: 70px; text-align: center;">' + locations[i][0] + "<br />" + locations[i][3] + ", " + locations[i][4] + "<br />" + locations[i][5] + "<br />" + locations[i][6]);
          infowindow.open(map, marker);
        }
      })(marker, i));

    }

  }
  </script>
</body>
</html>
