<% provide(:title, "All Leases") %>
<link href='https://fonts.googleapis.com/css?family=Varela+Round' rel='stylesheet' type='text/css'>

<html>
  <head>
    <script type="text/javascript" src="//maps.google.com/maps/api/js?key=AIzaSyDDVHE7vDIfbP8Jzh5lOO_tRwSsaBU7LA4&libraries=places&callback=initAutocomplete" async defer></script>
    <script src="//cdn.rawgit.com/mahnunchik/markerclustererplus/master/dist/markerclusterer.min.js"></script>
    <link href='https://fonts.googleapis.com/css?family=Varela+Round' rel='stylesheet' type='text/css'>
  </head>
  <body>

      <div id='map-canvas'>
        <div class="top-search-bar">
          <!-- <div class="filter-box"> -->
          <select id="numberbathroomsDropdown" class="dropdown" onchange="filter()">
            <option selected value="All">Any</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
            <option value="9">9</option>
            <option value="10">10</option>
          </select>
          <!-- <select id="numberbedroomsDropdown" class="dropdown" onchange="numberofbedroomsFilter()">
            <option selected value="All">Any</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
            <option value="9">9</option>
            <option value="10">10</option>
          </select> -->
          <label class="checkbox-inline content"><input type="checkbox" id="utilitiesFilter" onclick="filter()">Utilities</label>
          <label class="checkbox-inline content"><input type="checkbox" id="internetFilter" onclick="filter()">Internet</label>
          <label class="checkbox-inline content"><input type="checkbox" id="laundryFilter" onclick="filter()">Laundry</label>
          <label class="checkbox-inline content"><input type="checkbox" id="furnishedFilter" onclick="filter()">Furnished</label>

          <!-- <button type="button" class="btn btn-default col-sm-2"">Utilities</button>
          <button type="button" class="btn btn-default col-sm-2" onclick="internetFilter()">Internet</button>

          <button type="button" class="btn btn-default col-sm-2" onclick="markerProperties()">markerProperties</button> -->
        </div>
        <input id="pac-input" class="controls" type="text" placeholder="Search Box"/>
        <div id="map"></div>
      </div>




    <script type="text/javascript">
    var markersArray = []; //Array of lease markers
    var markersArrayID = []; //Array of all lease IDs
    var utilities = <%=raw @utilities %> //Array of leases with utilities
    var internet = <%=raw @internet %> //Array of leases with utilities
    var laundry = <%=raw @laundry %> //Array of leases with utilities
    var furnished = <%=raw @furnished %>//Array of leases with utilities


    function initAutocomplete() {
      var locations = <%=raw @markers %>

      var centerofmap = [43.6532, -79.3672643];
    	var latlang = new google.maps.LatLng(centerofmap[0], centerofmap[1]);
    	var map = new google.maps.Map(document.getElementById('map'), {
    		// scrollwheel: true,
    		zoom: 10,
    		center: latlang,
    		mapTypeId: google.maps.MapTypeId.ROADMAP
      	});

      // Create the search box and link it to the UI element.
      var input = document.getElementById('pac-input');
      var searchBox = new google.maps.places.SearchBox(input);
      map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

      // Bias the SearchBox results towards current map's viewport.
      map.addListener('bounds_changed', function() {
        searchBox.setBounds(map.getBounds());
      });

  	  // [START region_getplaces]
  	  // Listen for the event fired when the user selects a prediction and retrieve
  	  // more details for that place.
  	  searchBox.addListener('places_changed', function() {
  	  	var places = searchBox.getPlaces();
  	  	if (places.length == 0) {
  	  		return;
  	  	}

  	    // For each place, get the icon, name and location.
  	    var bounds = new google.maps.LatLngBounds();
  	    places.forEach(function(place) {
  	    	var icon = {
  	    		url: place.icon,
  	    		size: new google.maps.Size(71, 71),
  	    		origin: new google.maps.Point(0, 0),
  	    		anchor: new google.maps.Point(17, 34),
  	    		scaledSize: new google.maps.Size(38, 38)
  	    	};

          if (place.geometry.viewport) {
            // Only geocodes have viewport.
            bounds.union(place.geometry.viewport);
          } else {
        	bounds.extend(place.geometry.location);
          }
        });
  	    map.fitBounds(bounds);
  	  });
  	  // [END region_getplaces]

      var infowindow = new google.maps.InfoWindow();
      var marker, i;

      for (i = 0; i < locations.length; i++) {
        marker = new google.maps.Marker({
          position: new google.maps.LatLng(locations[i][1], locations[i][2]),
          map: map,
          address: locations[i][0],
          utilities: locations[i][6], //checks if the marker has utilities (attempting for filtering)
          internet: locations[i][7], //checks if the marker has utilities (attempting for filtering)
          laundry: locations[i][8], //checks if the marker has utilities (attempting for filtering)
          furnished: locations[i][9], //checks if the marker has utilities (attempting for filtering)
          numberofbathrooms: locations[i][10], //checks if the marker has utilities (attempting for filtering)
          numberofbedrooms: locations[i][11], //checks if the marker has utilities (attempting for filtering)
          numberofparkingspots: locations[i][12], //checks if the marker has utilities (attempting for filtering)
          typeOfHouse: locations[i][13], //checks if the marker has utilities (attempting for filtering)
          university: locations[i][14], //checks if the marker has utilities (attempting for filtering)
          id: locations[i][15],
        });

        google.maps.event.addListener(marker, 'click', (function(marker, i) {
          return function() {
            infowindow.setContent('<div class="markerInfoWindow";>' + locations[i][0] + "<br />" + locations[i][3] + ", " + locations[i][4] + "<br />" + locations[i][5] + "<br />" + locations[i][16]);
            infowindow.open(map, marker);
          }
        })(marker, i));

        markersArray.push(marker);
        markersArrayID.push(marker.id);

      }
    }
    function filter() {
      //get value of filters
      var bathroomsCheck = document.getElementById('numberbathroomsDropdown').value
      var utilitiesCheck = document.getElementById('utilitiesFilter').checked;
      var internetCheck = document.getElementById('internetFilter').checked;
      var laundryCheck = document.getElementById('laundryFilter').checked;
      var furnishedCheck = document.getElementById('furnishedFilter').checked;
      var checkboxArray = [markersArrayID]; //array of arrays based on filters

      if (utilitiesCheck == true) {
        checkboxArray.push(utilities);
      }
      else {
      }

      if (internetCheck == true) {
        checkboxArray.push(internet);
      }
      else {
      }

      if (laundryCheck == true) {
        checkboxArray.push(laundry);
      }
      else {
      }

      if (furnishedCheck == true) {
        checkboxArray.push(furnished);
      }
      else {
      }

      function getCommonElements(arrays){ //Find elements that are common in arrays
        var currentValues = {};
        var commonValues = {};
        for (var i = arrays[0].length-1; i >=0; i--){
          currentValues[arrays[0][i]] = 1;
        }
        for (var i = arrays.length-1; i>0; i--){
          var currentArray = arrays[i];
          for (var j = currentArray.length-1; j >=0; j--){
            if (currentArray[j] in currentValues){
              commonValues[currentArray[j]] = 1;
            }
          }
          currentValues = commonValues;
          commonValues = {};
        }
        return Object.keys(currentValues).map(function(value){
          return parseInt(value);
        });
      }

      function diffArray(arr1, arr2) { // Find elements that are uncommon between both arrays
         var set1 = new Set(arr1);
         var set2 = new Set(arr2);

         var arr = []

         set1.forEach(function(val) {
           if (!set2.has(val)) arr.push(val);
         });
         set2.forEach(function(val) {
           if (!set1.has(val)) arr.push(val);
         });

         return arr;
      }

      var mapmarkers = getCommonElements(checkboxArray); //AND all the arrays in checkboxArray to find elements that satisfy all conditions
      var removeMarkerIDs = diffArray(markersArrayID,mapmarkers); //Find all markers that need to be removed

      for (i = 0; i< removeMarkerIDs.length; i++){ //hide markers when filter is entered
        if (removeMarkerIDs[i] in markersArrayID != null) {
           markersArray[removeMarkerIDs[i]-1].setVisible(false)
        }
        else {
        }
      }

      for (i = 0; i< mapmarkers.length; i++){ //show markers when filter is unchecked
        if (mapmarkers[i] in markersArrayID != null) {
           markersArray[mapmarkers[i]-1].setVisible(true)
        }
        else {
        }
      }

      // console.log(markersArrayID)
      // console.log(removeMarkerIDs);
      // console.log(mapmarkers)

    }
    </script>
  </body>
</html>
